<?xml version="1.0" encoding="UTF-8"?>
<project name="what2eat" default="all">
  
  
  <property file="what2eat.properties"/>
  <!-- Uncomment the following property if no tests compilation is needed -->
  <!-- 
  <property name="skip.tests" value="true"/>
   -->
  
  <!-- Compiler options -->
  
  <property name="compiler.debug" value="on"/>
  <property name="compiler.generate.no.warnings" value="off"/>
  <property name="compiler.args" value=""/>
  <property name="compiler.max.memory" value="700m"/>
  <patternset id="ignored.files">
    <exclude name="**/CVS/**"/>
    <exclude name="**/SCCS/**"/>
    <exclude name="**/RCS/**"/>
    <exclude name="**/rcs/**"/>
    <exclude name="**/.DS_Store/**"/>
    <exclude name="**/.svn/**"/>
    <exclude name="**/.pyc/**"/>
    <exclude name="**/.pyo/**"/>
    <exclude name="**/*.pyc/**"/>
    <exclude name="**/*.pyo/**"/>
    <exclude name="**/.git/**"/>
    <exclude name="**/*.hprof/**"/>
    <exclude name="**/_svn/**"/>
    <exclude name="**/.hg/**"/>
    <exclude name="**/*.lib/**"/>
    <exclude name="**/*~/**"/>
    <exclude name="**/__pycache__/**"/>
    <exclude name="**/.bundle/**"/>
    <exclude name="**/*.rbc/**"/>
    <exclude name="**/vssver.scc/**"/>
    <exclude name="**/vssver2.scc/**"/>
  </patternset>
  <patternset id="library.patterns">
    <include name="*.war"/>
    <include name="*.ear"/>
    <include name="*.apk"/>
    <include name="*.zip"/>
    <include name="*.swc"/>
    <include name="*.ane"/>
    <include name="*.egg"/>
    <include name="*.jar"/>
  </patternset>
  <patternset id="compiler.resources">
    <exclude name="**/?*.java"/>
    <exclude name="**/?*.form"/>
    <exclude name="**/?*.class"/>
    <exclude name="**/?*.groovy"/>
    <exclude name="**/?*.scala"/>
    <exclude name="**/?*.flex"/>
    <exclude name="**/?*.kt"/>
    <exclude name="**/?*.clj"/>
  </patternset>
  
  <!-- JDK definitions -->
  
  <property name="jdk.bin.1.8" value="${jdk.home.1.8}/bin"/>
  <path id="jdk.classpath.1.8">
    <fileset dir="${jdk.home.1.8}">
      <include name="jre/lib/charsets.jar"/>
      <include name="jre/lib/deploy.jar"/>
      <include name="jre/lib/javaws.jar"/>
      <include name="jre/lib/jce.jar"/>
      <include name="jre/lib/jfr.jar"/>
      <include name="jre/lib/jfxswt.jar"/>
      <include name="jre/lib/jsse.jar"/>
      <include name="jre/lib/management-agent.jar"/>
      <include name="jre/lib/plugin.jar"/>
      <include name="jre/lib/resources.jar"/>
      <include name="jre/lib/rt.jar"/>
      <include name="jre/lib/ext/access-bridge-64.jar"/>
      <include name="jre/lib/ext/cldrdata.jar"/>
      <include name="jre/lib/ext/dnsns.jar"/>
      <include name="jre/lib/ext/jaccess.jar"/>
      <include name="jre/lib/ext/jfxrt.jar"/>
      <include name="jre/lib/ext/localedata.jar"/>
      <include name="jre/lib/ext/nashorn.jar"/>
      <include name="jre/lib/ext/sunec.jar"/>
      <include name="jre/lib/ext/sunjce_provider.jar"/>
      <include name="jre/lib/ext/sunmscapi.jar"/>
      <include name="jre/lib/ext/sunpkcs11.jar"/>
      <include name="jre/lib/ext/zipfs.jar"/>
    </fileset>
  </path>
  
  <property name="project.jdk.home" value="${jdk.home.1.8}"/>
  <property name="project.jdk.bin" value="${jdk.bin.1.8}"/>
  <property name="project.jdk.classpath" value="jdk.classpath.1.8"/>
  
  
  <!-- Project Libraries -->
  
  <path id="library.struts2.classpath">
    <fileset dir="${basedir}/lib">
      <patternset refid="library.patterns"/>
    </fileset>
  </path>
  
  
  <!-- Global Libraries -->
  
  
  <!-- Application Server Libraries -->
  
  <!-- Modules -->
  
  
  <!-- Module what2eat -->
  
  <dirname property="module.what2eat.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.what2eat" value="${project.jdk.home}"/>
  <property name="module.jdk.bin.what2eat" value="${project.jdk.bin}"/>
  <property name="module.jdk.classpath.what2eat" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.what2eat" value="-encoding UTF-8 -source 1.6 ${compiler.args}"/>
  
  <property name="what2eat.output.dir" value="/production/what2eat"/>
  <property name="what2eat.testoutput.dir" value="/test/what2eat"/>
  
  <path id="what2eat.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="what2eat.module.production.classpath">
    <path refid="${module.jdk.classpath.what2eat}"/>
    <path refid="library.struts2.classpath"/>
  </path>
  
  <path id="what2eat.runtime.production.module.classpath">
    <pathelement location="${what2eat.output.dir}"/>
    <path refid="library.struts2.classpath"/>
  </path>
  
  <path id="what2eat.module.classpath">
    <path refid="${module.jdk.classpath.what2eat}"/>
    <pathelement location="${what2eat.output.dir}"/>
    <path refid="library.struts2.classpath"/>
  </path>
  
  <path id="what2eat.runtime.module.classpath">
    <pathelement location="${what2eat.testoutput.dir}"/>
    <pathelement location="${what2eat.output.dir}"/>
    <path refid="library.struts2.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.what2eat">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.what2eat">
    <patternset refid="excluded.from.module.what2eat"/>
  </patternset>
  
  <path id="what2eat.module.sourcepath">
    <dirset dir="${module.what2eat.basedir}">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.what2eat" depends="compile.module.what2eat.production,compile.module.what2eat.tests" description="Compile module what2eat"/>
  
  <target name="compile.module.what2eat.production" description="Compile module what2eat; production classes">
    <mkdir dir="${what2eat.output.dir}"/>
    <javac destdir="${what2eat.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.what2eat}/javac">
      <compilerarg line="${compiler.args.what2eat}"/>
      <bootclasspath refid="what2eat.module.bootclasspath"/>
      <classpath refid="what2eat.module.production.classpath"/>
      <src refid="what2eat.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.what2eat"/>
    </javac>
    
    <copy todir="${what2eat.output.dir}">
      <fileset dir="${module.what2eat.basedir}/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.what2eat.tests" depends="compile.module.what2eat.production" description="compile module what2eat; test classes" unless="skip.tests"/>
  
  <target name="clean.module.what2eat" description="cleanup module">
    <delete dir="${what2eat.output.dir}"/>
    <delete dir="${what2eat.testoutput.dir}"/>
  </target>
  
  <target name="init" description="Build initialization">
    <!-- Perform any build initialization in this target -->
  </target>
  
  <target name="clean" depends="clean.module.what2eat, clean.artifact.what2eat_war_exploded" description="cleanup all"/>
  
  <target name="build.modules" depends="init, clean, compile.module.what2eat" description="build all modules"/>
  
  <target name="init.artifacts">
    <property name="artifacts.temp.dir" value="${basedir}/__artifacts_temp"/>
    <property name="artifact.output.what2eat" value="${basedir}/out/artifacts/what2eat"/>
    <property name="artifact.output.what2eat_war_exploded" value="${basedir}/out/artifacts/what2eat_war_exploded"/>
    <mkdir dir="${artifacts.temp.dir}"/>
    <property name="temp.jar.path.what2eat.war" value="${artifacts.temp.dir}/what2eat.war"/>
  </target>
  
  <target name="clean.artifact.what2eat_war_exploded" description="clean what2eat_war_exploded artifact output">
    <delete dir="${artifact.output.what2eat_war_exploded}"/>
  </target>
  
  <target name="artifact.what2eat" depends="init.artifacts, artifact.what2eat_war_exploded" description="Build &#39;what2eat&#39; artifact">
    <property name="artifact.temp.output.what2eat" value="${artifacts.temp.dir}/what2eat"/>
    <mkdir dir="${artifact.temp.output.what2eat}"/>
    <zip destfile="${temp.jar.path.what2eat.war}">
      <zipfileset dir="${artifact.output.what2eat_war_exploded}"/>
    </zip>
    <copy file="${temp.jar.path.what2eat.war}" tofile="${artifact.temp.output.what2eat}/what2eat.war"/>
  </target>
  
  <target name="artifact.what2eat_war_exploded" depends="init.artifacts, compile.module.what2eat" description="Build &#39;what2eat_war_exploded&#39; artifact">
    <mkdir dir="${artifact.output.what2eat_war_exploded}"/>
    <copy todir="${artifact.output.what2eat_war_exploded}">
      <fileset dir="${basedir}/web"/>
    </copy>
    <mkdir dir="${artifact.output.what2eat_war_exploded}/WEB-INF"/>
    <copy file="${basedir}/.idea/web/WEB-INF/web.xml" tofile="${artifact.output.what2eat_war_exploded}/WEB-INF/web.xml"/>
    <mkdir dir="${artifact.output.what2eat_war_exploded}/WEB-INF"/>
    <mkdir dir="${artifact.output.what2eat_war_exploded}/WEB-INF/lib"/>
    <copy file="${basedir}/lib/asm.jar" tofile="${artifact.output.what2eat_war_exploded}/WEB-INF/lib/asm.jar"/>
    <copy file="${basedir}/lib/ognl.jar" tofile="${artifact.output.what2eat_war_exploded}/WEB-INF/lib/ognl.jar"/>
    <copy file="${basedir}/lib/asm-tree.jar" tofile="${artifact.output.what2eat_war_exploded}/WEB-INF/lib/asm-tree.jar"/>
    <copy file="${basedir}/lib/javassist.jar" tofile="${artifact.output.what2eat_war_exploded}/WEB-INF/lib/javassist.jar"/>
    <copy file="${basedir}/lib/commons-io.jar" tofile="${artifact.output.what2eat_war_exploded}/WEB-INF/lib/commons-io.jar"/>
    <copy file="${basedir}/lib/freemarker.jar" tofile="${artifact.output.what2eat_war_exploded}/WEB-INF/lib/freemarker.jar"/>
    <copy file="${basedir}/lib/xwork-core.jar" tofile="${artifact.output.what2eat_war_exploded}/WEB-INF/lib/xwork-core.jar"/>
    <copy file="${basedir}/lib/asm-commons.jar" tofile="${artifact.output.what2eat_war_exploded}/WEB-INF/lib/asm-commons.jar"/>
    <copy file="${basedir}/lib/commons-lang.jar" tofile="${artifact.output.what2eat_war_exploded}/WEB-INF/lib/commons-lang.jar"/>
    <copy file="${basedir}/lib/struts2-core.jar" tofile="${artifact.output.what2eat_war_exploded}/WEB-INF/lib/struts2-core.jar"/>
    <copy file="${basedir}/lib/commons-fileupload.jar" tofile="${artifact.output.what2eat_war_exploded}/WEB-INF/lib/commons-fileupload.jar"/>
    <mkdir dir="${artifact.output.what2eat_war_exploded}/WEB-INF/classes"/>
    <copy todir="${artifact.output.what2eat_war_exploded}/WEB-INF/classes">
      <fileset dir="${what2eat.output.dir}"/>
    </copy>
  </target>
  
  <target name="build.all.artifacts" depends="artifact.what2eat, artifact.what2eat_war_exploded" description="Build all artifacts">
    <mkdir dir="${artifact.output.what2eat}"/>
    <copy todir="${artifact.output.what2eat}">
      <fileset dir="${artifact.temp.output.what2eat}"/>
    </copy>
    
    <!-- Delete temporary files -->
    <delete dir="${artifacts.temp.dir}"/>
  </target>
  
  <target name="all" depends="build.modules, build.all.artifacts" description="build all"/>
</project>